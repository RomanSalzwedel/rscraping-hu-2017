source("packages.r")
source("functions.r")
dat <- flights %>% as.data.frame
head(dat)
destinations <- group_by(dat, dest)
summarize(destinations, planes = n_distinct(tailnum))
summarize_each(destinations, funs(mean))
head(destinations)
table(dat$dest)
destinations <- group_by(dat, dest)
summarize_each(dat, funs(mean))
summarize_each(dat, funs(mean, median))
?summarize_each
summarize_each_(dat, funs(mean), distance, air_time)
summarize_each_(dat, funs(mean), vars = c(distance, air_time))
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"))
summarize_each_(dat, funs(mean, na.rm = TRUE), vars = c("distance", "air_time"))
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"), na.rm = TRUE)
summarize_each_(dat, funs(mean), vars = c("distance", "air_time"))
dat
head(dat)
summarize_each_(dat, funs(mean), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(mean, na.rm = T), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(mean, list(na.rm = T)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs_(list(mean), list(na.rm = T)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs(m1 = mean(., na.rm = TRUE)), vars = c("distance", "arr_delay"))
summarize_each_(dat, funs(mean = mean(., na.rm = TRUE)), vars = c("distance", "arr_delay"))
x <- c(4,8,15,16,23,42)
x
mode(x)
length(x)
summary(x)
countries <- c("Germany", "France", "Netherlands", "Belgium")
countries
paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = ", ")
paste0("Hello", "world!")
paste("Hello", "world!")
c(countries, "Poland")
mode(countries)
length(countries)
summary(countries)
countries
x
x > 15
x == sqrt(225)
(x > 8 & x < 23)
(x > 8 | x < 23)
y <- c(1,10,NA,7,NA,11)
sum(y)
sum(y, na.rm = TRUE)
y
y == NA
is.na(y)
!is.na(y)
!is.na(y)
y*3
?rep
?seq
seq(1, 10, 2)
seq_along(x)
y
countries
seq_along(countries)
rep(c(1, 2, 3), 2)
rep(c(1, 2, 3), 3)
?rep
rep(c(1, 2, 3), times = 3)
rep(c(1, 2, 3), each = 2)
rep(c(1, 2, 3), each = 2)
vec1 <- c(2, 20, -5, 1, 200)
vec1
vec2 <- seq(1, 5)
vec2
vec2 <- seq(1, 5, 1.5)
vec2
sort(vec1)
sort(vec1, decreasing = FALSE)
sort(vec1, decreasing = TRUE)
order(vec1, decreasing = FALSE)
vec1
order(vec2)
order(vec2)
vec2 <- seq(1, 5)
order(vec2)
order(vec1)
vec1[order(vec1)]
sort(vec1)
vec1[order(vec1)]
vec3 <- c(1,10,NA,7,NA,11)
vec3
vec4 <- vec3[!is.na(vec3)]
vec4
z <- c(1,2,"Bavaria", 4)
z
str(z)
zz <- c(1,2,Bavaria,4,5,6) # error
Bavaria <- 3
zz <- c(1,2,Bavaria,4,5,6)
zz
str(zz)
zz
zzchar <- as.character(zz)
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar <- "Bavaria"
zzchar
zzchar <- as.character(zz)
zzchar[3] <- "Bavaria"
zzchar
zznum <- as.numeric(zzchar)
zznum
zzchar[2] <- "Berlin"
zzchar
as.numeric(zzchar)
x
zz
xzz <- c(x,zz)
xzz
countries
countries[2]
xzz
xzz[1:6] # xzz[seq(1,6)], xzz[c(1,2,3,4,5,6)]
xzz[c(2, 5, 10)]
xzz[-1]
xzz -1
xzz[-(1, 3)]
xzz[-c(1, 3)]
Hessen
xzz[Hessen]
Hessen <- 4
xzz[Hessen]
seq(0, 10, by = 2)
xzz[seq(0, 10, by = 2)]
xzz[c(TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE)]
y
y[is.na(y)]
y[!is.na(y)]
y
y[y>5 | !is.na(y)]
y[y>5 | is.na(y)]
countries
countries[3] <- "Switzerland"
countries
xzz
xzz[c(1, 3, 5)] <- c(100,110,120)
xzz
xzz_new <- xzz
xzz_new
xzz_new[xzz > 100] <- 1
xzz_new
xzz_new[xzz <= 100] <- 0
xzz_new
x <- seq(0, 20, 4)
x
y <- c(3,3,3,4,4,4,4,5,5,5,5,5)
y
rep(c(3, 4, 5), each = 3)
rep(c(3, 4, 5), c(3, 4, 5))
x
y
z <- c(x[1:5], y[2:12])
z
seq(1, 100) %>% sum()
library(magrittr)
seq(1, 100) %>% sum()
sum(1:100)
101*50
seq(1, 100, 2)
seq(1, 100, 2)^2
seq(1, 100, 2)^2 %>% sum
foo_df <- as.data.frame(matrix(ncol = 6))
foo_df
names(foo_df)
names(foo_df) <- c("hIgHlo", "REPEAT VALUE", "REPEAT VALUE", "% successful (2009)",  "abc@!*", "")
foo_df
janitor::clean_names(foo_df)
make.names(names(foo_df)) # base R solution - not very convincing
c(1:5, 98, 99)
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99))
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
sample(c(1:5, 98, 99), 20, replace = TRUE)
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
source("packages.r")
source("functions.r")
?convert_to_NA
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
foo <- sample(c(1:5, 98, 99), 20, replace = TRUE)
foo
foo[foo == 98 | foo == 99] <- NA
foo
head(mtcars)
table(mtcars$cyl)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE)
janitor::tabyl(mtcars$cyl, show_na = TRUE, sort = TRUE) %>% add_totals_row()
mtcars %$% table(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row", show_totals = TRUE)
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row") %>% add_totals_row()
crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars %>% janitor::crosstab(cyl, gear) %>% adorn_crosstab(denom = "row")
mtcars
sum_vector <- vector()
sum_vector
sum_vector <- numeric()
sum_vector
sum_vector <- numeric()
for(i in 1:4) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
mtcars[,1]
names(mtcars)
sum_vector <- numeric()
for(i in 1:11) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
sum_vector <- numeric()
for(i in 1:12) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
str(mtcars)
length(mtcars)
seq_along(mtcars)
ncol(mtcars)
nrow(mtcars)
sum_vector <- numeric()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% sum
}
sum_vector
lapply(mtcars, is.numeric)
sum_vector <- logical()
for(i in 1:ncol(mtcars)) {
sum_vector[i] <- mtcars[,i] %>% is.numeric
}
sum_vector
foo <- lapply(mtcars, is.numeric)
foo
class(foo)
sapply(mtcars, is.numeric)
foo <- sapply(mtcars, is.numeric)
class(foo)
sapply(mtcars, is.numeric) %>% class
a <- matrix(1:20, nrow = 5)
a
apply(a, 1, mean)
apply(a, 2, mean)
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
names(mtcars)
apply(mtcars[,1:2], 1, mean)
mtcars[,1:2] %>% apply(1, mean)
apply(mtcars[,1:2], 1, mean)
names(mtcars)
apply(mtcars[,c("gear", "carb")], 1, mean)
select(mtcars, gear, carb)
select(mtcars, gear, carb) %>% apply(1, mean)
?runif
?rnorm
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
runif(10)
xs <- replicate(5, runif(10), simplify = FALSE)
xs
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
ws
?weighted.mean
Map(weighted.mean, xs, ws)
Map(weighted.mean, xs, ws) %>% unlist
mtcars
mtcars$mpg
mtcars$mpg %>% class
(current_folder <- getwd())
setwd("/Users/munzerts/github/")
setwd("/Users/munzerts/github/rscraping-hu-2017")
dir.create("data")
dir.create("data/r-data")
# get all pre-compiled data sets
dat <- as.data.frame(data(package = "datasets")$results)
dat$Item %<>% str_replace(" \\(.+\\)", "")
dat
# store data sets in local folder
for (i in 1:50) {
try(df_out <- dat$Item[i] %>% as.character %>% get)
save(df_out, file = paste0("data/r-data/", dat$Item[i], ".RData"))
}
dir()
dir("data/r-data")
filenames <- dir("data/r-data", full.names = TRUE)
filenames
dir("data/r-data", pattern = "US")
dir("data/r-data", pattern = "US", ignore.case = TRUE)
?files
filenames
basename(filenames)
url <- "http://www.mzes.uni-mannheim.de/d7/en/news/media-coverage/ist-die-wahlforschung-in-der-krise-der-undurchschaubare-buerger"
url
basename(url)
dirname(url)
file_inf <- file.info(dir(recursive = F))
file_inf
tools::file_ext(filenames)
filenames
tools::file_ext(dir())
file.exists(filenames)
file.exists("voterfile.RData")
file.exists(filenames)
file.exists()
(foo <- file.choose())
